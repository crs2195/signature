Apache PDFBOX is an open source Java library for working with PDF documents, which allows the creation of new PDF documents, manipulation of existing documents, the possibility to extract content from documents, as well as digitally signing documents. For the interaction with PDF documents within the PDFBox API, the specific class PDDocument is used. The first step in creating the signature is to create the signing service - a class that must implement the interface SignatureInterface, and involves overwriting the Sign method. Next, the document is prepared for signing, by instantiating an object of the ExternalSigningSupport class. This object allows the extraction of the content of the document (data to be signed), in the form of InputStream, which is sent as parameter to the explicit call of the Sign method. Bouncy Castle classes are used in the Sign method. First of all, a CMSSignedDataGenerator object has to be instantiated, which is meant to compute the signature using a private key stored in a specific KeyStore. For implementing remote digital signing, there is no KeyStore, therefore a PKCS#7 signature with the already signed data has to be created. In order to do this, a ContentSigner object has to be instantiated (interface for an operator that is capable of creating a signature), which requires overwriting the GetSignature method that returns the signed bytes received from the remote digital signature web service exposed by the TSP. A new generator (SignerInfoGenerator - used for a particular signatory, namely the previously created ContentSigner) is added to the CMSSignedDataGenerator. When calling, from the CMSSignedDataGenerator, the method which generates the signature, it is necessary to send as parameter an array of bytes, which will not be used. The SDK checks for a SignerInfoGenerator object. If such an object exists for the corresponding generator, the GetSignature method, that has been overwritten, shall be called. It will return the bytes of the signature in a CMSSignedData object, along with the digital certificate associated to the user that requested the sign. The Sign method returns the object, encoded in ASN.1 format. The last step is to set those bytes in the PDF document.
